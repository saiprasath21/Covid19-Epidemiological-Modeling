import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


import os
os.chdir('/home/sai/Desktop/COVID-19/stochastic/systems/output')
os.listdir()



confirmed = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,3,3,4,5,5,5,5,5,5,5,6,8,8,12,20,28,39,52,102,102,155,205,283,368,451,514,589,647,708,797,868,950,1039,1106,1160,1210,1239,1283,1312,1330,1349,1366,1386,1401,1409,1422,1431,1440,1445,1451,1456,1461,1470,1469,1472,1474,1476,1479,1485,1487,1487,1486,1488,1489,1490,1492,1494,1497,1497,1497,1497,1498,1498,1499,1499,1499,1503,1503,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1504,1506,1506,1507,1507,1509,1511,1513,1515,1516,1519,1520,1522,1526,1528,1528,1528,1530,1530,1530,1533,1534,1536,1537,1540,1542,1543,1544,1544,1545,1547,1548,1549,1550,1553,1554,1555,1555,1555,1556,1556,1556,1556,1557,1559,1560,1560,1562,1565,1567,1567,1569,1569,1569,1569,1569,1569,1570,1570,1589,1602,1609,1622,1631,1643,1649,1654,1665,1671,1674,1683,1690,1695,1702,1714,1727,1729,1738,1752,1757,1759,1764,1767,1772,1776,1782,1788,1792,1793]
death = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,2,4,4,5,9,9,9,11,11,12,12,13,14,17,18,18,19,19,19,19,19,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,24,24,24,24,24,24,24]
recovered = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,22,27,37,50,56,63,74,83,92,103,127,156,176,241,282,317,373,422,471,546,628,728,770,816,867,912,974,1006,1036,1095,1118,1142,1180,1214,1229,1241,1252,1263,1266,1276,1302,1316,1332,1347,1368,1371,1386,1398,1402,1411,1421,1428,1433,1433,1433,1447,1452,1455,1455,1456,1456,1461,1462,1474,1481,1481,1481,1481,1481,1481,1481,1481,1481,1481,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1482,1483,1483,1484,1484,1484,1484,1484,1484,1484,1490,1490,1490,1490,1490,1492,1492,1494,1497,1497,1497,1497,1498,1498,1499,1506,1506,1506,1506,1506,1506,1511,1513,1513,1513,1513,1514,1514,1514,1518,1518,1518,1518,1523,1523,1524,1524,1524,1524,1526,1526,1526,1531,1531,1531,1531,1531,1531,1531,1531,1538,1538,1538,1538,1539,1539,1554,1561,1568,1570,1585,1598,1606,1622,1630,1631,1632,1634,1635,1639,1648,1655]

new_confirmed = [64, 88, 132, 173, 231, 315, 394, 469, 541, 615, 667, 744, 817, 899, 974, 1051, 1121, 1174, 1211, 1239, 1283, 1310, 1335, 1355, 1366, 1382, 1393, 1410, 1422, 1432, 1442, 1445, 1451, 1456, 1461, 1467, 1473, 1476, 1479, 1480, 1482, 1485, 1490, 1490, 1491, 1491, 1493, 1495, 1496, 1497, 1498, 1501, 1501, 1501, 1501, 1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1510, 1523, 1535, 1540, 1553, 1565, 1574, 1584, 1589, 1594, 1601, 1603, 1610, 1617, 1620, 1625, 1631, 1640, 1644, 1648, 1650, 1654, 1658, 1660, 1662, 1667, 1669, 1673]

day_zero=0
for i in range(0, len(confirmed)):
    if(confirmed[i]==39):
        day_zero=i
        break
# print("Day 0: "+ str(day_zero))




confirmed = confirmed[day_zero:]
death = death[day_zero:]
recovered = recovered[day_zero:]
active = np.array(confirmed) - np.array(death) - np.array(recovered)
actual_time = np.arange(0, len(new_confirmed))

daily_reported = np.arange(0,len(confirmed))
new_daily_reported = np.arange(0,len(new_confirmed))

for i in range(1,len(confirmed)):
	daily_reported[i] = confirmed[i]-confirmed[i-1]
for i in range(1,len(new_confirmed)):	
	new_daily_reported[i] = new_confirmed[i] - new_confirmed[i-1]
new_daily_reported[0]=64
daily_reported[0]=39

k=120
data = pd.read_csv('out.csv')
active_cases = data['nz-c2.clinical_cases']
actual_level = data['nz-c2.Level']
iterations = 1000
sim_time = 301
time = np.arange(0,sim_time)
avg_total = np.zeros((sim_time,))
level = np.zeros((sim_time,))
print(avg_total.size)
count1 =0
count2 =0
count3 =0
for i in range(0,iterations):
	print(i)
	#print(active_cases[i*sim_time:5+i*sim_time])
	avg_total += np.array(active_cases[i*sim_time:(i+1)*sim_time])
	if(active_cases[(i+1)*sim_time - 1]  < 1700):
		count1 +=1
	elif(active_cases[(i+1)*sim_time - 1] > 1700 and active_cases[(i+1)*sim_time - 1]  < 2400):
		count2 +=1
	else:
		count3 +=1
	level += np.array(actual_level[i*sim_time:(i+1)*sim_time]) 
	plt.plot(time[0:k], active_cases[i*sim_time:(i+1)*sim_time][0:k],c='y', alpha=0.1)


#print(count1/iterations, count2/iterations, count3/iterations)
avg_total = avg_total/iterations
print("Length of new_confirmed: "+ str(len(new_confirmed)))
print(avg_total[0])
#avg_total[0]=39
level = level/iterations
#print(level)
level1 = np.around(level)
plt.plot(time[0:k], level1[0:k] * 600, c='g',label='Controller Level')
plt.plot(actual_time[0:k],new_confirmed[0:k],c='r', label='Actual')
plt.plot(time[0:k], avg_total[0:k], c='b', label='Predicted')
#plt.axhline(y=2400,c='black')
#plt.axhline(y=1700,c='black')
plt.title('Second Wave Modelling')
plt.legend()
plt.show()

# plt.plot(time, 0.67 * avg_total,c='b')
# plt.plot(actual_time[0:300],confirmed[0:300],c='r')
# plt.show()

