inputs:
  Ro: REAL
  Roc: REAL
  psi: REAL
outputs:
  S: REAL
  E1: REAL 
  E2: REAL
  E3: REAL
  E4: REAL
  P1: REAL
  I1: REAL
  I2: REAL
  I3: REAL
  I4: REAL
  I5: REAL
  I6: REAL
  I7: REAL
  I8: REAL
  I9: REAL
  I10: REAL
  L1: REAL
  L2: REAL
  L3: REAL
  L4: REAL
  L5: REAL
  L6: REAL
  L7: REAL
  L8: REAL
  L9: REAL
  L10: REAL
  R: REAL
  D: REAL
  prob: REAL
  C_dot: REAL
  cases: REAL
  I_sum: REAL
  I_iso: REAL
  L_iso: REAL
  state_level: REAL
parameters:
  c_home:
    type: REAL
    default: 0
  c_gen:
    type: REAL
    default: 0
  population:
    type: REAL
    default: 4822233
  initial_case_distribution_factor:
    type: REAL
    default: 4.8
  initial_cases:
    type: REAL
    default: 39
  tmax:
    type: REAL
    default: 0
  qmax:
    type: REAL
    default: 1000
  amp:
    type: REAL
    default: 0
  de:
    type: REAL
    default: 4
  ne:
    type: REAL
    default: 4
  eps:
    type: REAL
    default: 1
  dp:
    type: REAL
    default: 1
  np:
    type: REAL
    default: 1
  phi:
    type: REAL
    default: 1
  ip:
    type: REAL
    default: 0.5
  di:
    type: REAL
    default: 5
  ni:
    type: REAL
    default: 10
  gamma:
    type: REAL
    default: 2
  dl:
    type: REAL
    default: 5
  nl:
    type: REAL
    default: 10
  delta:
    type: REAL
    default: 2
  cl:
    type: REAL
    default: 0.5
  p_sick:
    type: REAL
    default: 0.67
  p_hosp:
    type: REAL
    default: 0.01
  p_dead:
    type: REAL
    default: 0.015
  p_consult:
    type: REAL
    default: 0.40
  p_test:
    type: REAL
    default: 1.0
  CFR0:
    type: REAL
    default: 0.01
  CFR1:
    type: REAL
    default: 0.02
  n_ICU:
    type: REAL
    default: 300
  p_ICU:
    type: REAL
    default: 0.0125
  e:
    type: REAL
    default: 1
locations:
  unconstrained:
    invariant: c_home == 0
    flow:
      S: -1 * S * (bp * P_sum + bi * (I_sum - 0.5 * I_sum * p_sick) + bl * (L_sum - 0.5 * L_sum * p_sick)) / population
      E1: S * (bp * P_sum + bi * (I_sum - 0.5 * I_sum * p_sick) + bl * (L_sum - 0.5 * L_sum * p_sick)) / population - eps * E1
      E2: eps * E1 - eps * E2
      E3: eps * E2 - eps * E3
      E4: eps * E3 - eps * E4
      P1: eps * E4 - phi * P1
      I1: phi * P1 - gamma * I1 
      I2: gamma * I1 - gamma * I2 
      I3: gamma * I2 - gamma * I3 
      I4: gamma * I3 - gamma * I4 
      I5: gamma * I4 - gamma * I5 
      I6: gamma * I5 - gamma * I6 
      I7: gamma * I6 - gamma * I7 
      I8: gamma * I7 - gamma * I8 
      I9: gamma * I8 - gamma * I9 
      I10: gamma * I9 - gamma * I10    
      L1: gamma * I10 - delta * L1
      L2: delta * L1 - delta * L2
      L3: delta * L2 - delta * L3
      L4: delta * L3 - delta * L4
      L5: delta * L4 - delta * L5
      L6: delta * L5 - delta * L6
      L7: delta * L6 - delta * L7
      L8: delta * L7 - delta * L8
      L9: delta * L8 - delta * L9
      L10: delta * L9 - delta * L10
      R: gamma * (1 - p_sick * p_dead) * L10
      D: gamma * p_sick * p_dead * L10    
      cases: phi * P1 * p_sick
      t: 1
    update:
      I_iso: I_sum * p_sick
      L_iso: L_sum * p_sick
      I_sum: I1 + I2 + I3 + I4 + I5 + I6 + I7 + I8 + I9 + I10 
      L_sum: L1 + L2 + L3 + L4 + L5 + L6 + L7 + L8 + L9 + L10 
      E_sum: E1 + E2 + E3 + E4
      P_sum: P1 
      I_home: 0
      bi: calc_bp(Ro, t)
      biso: calc_bp(Roc, t)
      bp: bi * ip
      bl: bi * cl
      C_dot: phi * P1 * p_sick 
      prob: func_pow((1 - p_test) , cases * p_sick * (p_consult + p_hosp + p_dead))
      state_level: 0
      CFR: calc_CFR(I_sum * p_ICU)
    transitions:
      - to: isolated_below
        guard: c_home > 0 && p_sick * I_sum <= qmax
        update:
          I_iso: p_sick * I_sum
          I_home:  0
      - to: isolated_above
        guard: c_home > 0 && p_sick * I_sum > qmax
        update:
          I_iso: qmax
          I_home:  p_sick * I_sum - qmax
  isolated_below:
    invariant: c_home > 0 && p_sick * I_sum <= qmax
    flow:
      S: -1 * S * (bp * P_sum + bi * (I_sum - I_iso - I_home * c_home) + psi) * (1 - c_gen) / population
      E1: S * (bp * P_sum + bi * (I_sum - I_iso - I_home * c_home) + psi) * (1 - c_gen) / population - eps * E1
      E2: eps * E1 - eps * E2
      E3: eps * E2 - eps * E3
      E4: eps * E3 - eps * E4
      P1: eps * E4 - phi * P1
      I1: phi * P1 - gamma * I1
      I2: gamma * I1 - gamma * I2
      I3: gamma * I2 - gamma * I3
      I4: gamma * I3 - gamma * I4   
      I5: gamma * I4 - gamma * I5
      I6: gamma * I5 - gamma * I6
      I7: gamma * I6 - gamma * I7
      I8: gamma * I7 - gamma * I8
      I9: gamma * I8 - gamma * I9
      I10: gamma * I9 - gamma * I10     
      R: gamma * (1 - p_sick * p_dead) * I10
      D: gamma * p_sick * p_dead * I10     
      cases: phi * P1
      t: 1
    update:
      I_sum: I1 + I2 + I3 + I4 + I5 + I6 + I7 + I8 + I9 + I10 
      E_sum: E1 + E2 + E3 + E4
      P_sum: P1 
      I_iso: p_sick * I_sum 
      I_home:  0
      bi: calc_bp(Ro, t)
      bp: bi * ip
      C_dot: phi * P1 
      prob: func_pow((1 - p_test) , cases * p_sick * (p_consult + p_hosp + p_dead))
      state_level: 1
    transitions:
      - to: unconstrained
        guard: c_home == 0
        update:
          I_iso: 0
          I_home:  0
      - to: isolated_above
        guard: c_home > 0 && p_sick * I_sum > qmax
        update:
          I_iso: qmax
          I_home:  p_sick * I_sum - qmax
  isolated_above:
    invariant: c_home >0 && p_sick * I_sum > qmax
    flow:
      S: -1 * S * (bp * P_sum + bi * (I_sum - I_iso - I_home * c_home) + psi) * (1 - c_gen) / population
      E1: S * (bp * P_sum + bi * (I_sum - I_iso - I_home * c_home) + psi) * (1 - c_gen) / population - eps * E1
      E2: eps * E1 - eps * E2
      E3: eps * E2 - eps * E3
      E4: eps * E3 - eps * E4
      P1: eps * E4 - phi * P1
      I1: phi * P1 - gamma * I1
      I2: gamma * I1 - gamma * I2
      I3: gamma * I2 - gamma * I3
      I4: gamma * I3 - gamma * I4   
      I5: gamma * I4 - gamma * I5
      I6: gamma * I5 - gamma * I6
      I7: gamma * I6 - gamma * I7
      I8: gamma * I7 - gamma * I8
      I9: gamma * I8 - gamma * I9
      I10: gamma * I9 - gamma * I10     
      R: gamma * (1 - p_sick * p_dead) * I10
      D: gamma * p_sick * p_dead * I10      
      cases: phi * P1 
      t: 1
    update:
      I_sum: I1 + I2 + I3 + I4 + I5 + I6 + I7 + I8 + I9 + I10
      E_sum: E1 + E2 + E3 + E4
      P_sum: P1 
      I_iso: qmax
      I_home:  p_sick * I_sum - qmax
      bi: calc_bp(Ro, t)
      bp: bi * ip
      C_dot: phi * P1
      prob: func_pow((1 - p_test) , cases * p_sick * (p_consult + p_hosp + p_dead))
      state_level: 2
    transitions:
      - to: unconstrained
        guard: c_home == 0
        update:
          I_iso: 0
          I_home:  0
      - to: isolated_below
        guard: c_home > 0 && p_sick * I_sum <= qmax
        update:
          I_iso: p_sick * I_sum
          I_home:  0
functions:
  func_pow:
    inputs:
      x: REAL
      y: REAL
    logic: |
      return pow(x,y)
  calc_bp:
    inputs:
      Ro: REAL
      t: REAL
    logic:
      return (Ro/(ip * dp + di + dl * cl)) * (1 + amp * cos(2*3.1415*(t-tmax)/365)) 
  calc_CFR:
    inputs:
      ICU_patients: REAL
    logic: |
      if(ICU_patients > n_ICU) {
        return CFR1 - (CFR1 - CFR0) * n_ICU / ICU_patients
      }
      return CFR0
initialisation:
  state: unconstrained
  valuations:
    E1: 977.69
    E2: 0.0
    E3: 0.0
    E4: 0.0 
    P1:  0.0
    I1: 39.0/0.67
    I2: 0
    I3: 0
    I4: 0
    I5: 0
    I6: 0
    I7: 0
    I8: 0
    I9: 0
    I10: 0
    L1: 0
    L2: 0
    L3: 0
    L4: 0
    L5: 0
    L6: 0
    L7: 0
    L8: 0
    L9: 0
    L10: 0
    S: population - E1 - I1
    R: 0
    D: 0
    prob: 1 
    I_sum: I1 + I2 + I3 + I4 + I5 + I6 + I7 + I8 + I9 + I10 
    L_sum: L1 + L2 + L3 + L4 + L5 + L6 + L7 + L8 + L9 + L10 
    E_sum: E1 + E2 + E3 + E4
    P_sum: P1 
    I_iso: I_sum * p_sick 
    L_iso: L_sum * p_sick
    I_home: 0
    bi: calc_bp(Ro, 0)
    biso: calc_bp(Roc, 0)
    bp: bi * ip
    bl: bi * cl
    cases: initial_cases 
    state_level: 0

